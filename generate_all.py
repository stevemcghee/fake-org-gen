# This file was generated by the Gemini CLI.
# For more information, see: https://github.com/google-gemini/gemini-cli
#
#      ,ad8888ba,
#     d8"'    `"8b
#    d8'        `8b
#    88          88
#    88          88
#    Y8,        ,8P
#     Y8a.    .a8P
#      `"Y8888Y"'
#

import json
import subprocess
import argparse
import os

def get_config_value(config, key, default=None):
    """Gets a value from the config, supporting the new format."""
    if key in config and "value" in config[key]:
        return config[key]["value"]
    return default

def run_calendar_generator(domain, users, config):
    print("--- Running Calendar Generator ---")
    users_json = json.dumps(users)
    months = get_config_value(config, "months_to_generate", 6)
    num_events_range = get_config_value(config, "num_events_range", [20, 40])
    location = get_config_value(config, "location", "Middle-earth")
    shared_event_types = get_config_value(config, "shared_event_types", [])
    solo_event_types = get_config_value(config, "solo_event_types", [])
    output_dir = get_config_value(config, "output_dir", "output/calendar")

    cmd = [
        "python3", "calendar/generate_events.py",
        "--domains", domain,
        "--users", users_json,
        "--months", str(months),
        "--num-events", f'{num_events_range[0]},{num_events_range[1]}',
        "--location", location,
        "--shared-event-types", json.dumps(shared_event_types),
        "--solo-event-types", json.dumps(solo_event_types),
        "--output-dir", output_dir
    ]
    subprocess.run(cmd)

def run_email_generator(config):
    print("--- Running Email Generator ---")
    num_samples = get_config_value(config, "num_samples", 1000)
    output_dir = get_config_value(config, "output_dir", "output/email")
    num_mbox_files = get_config_value(config, "num_mbox_files", 2)
    cmd = [
        "python3", "email/create_large_mbox_samples.py",
        "--num-samples", str(num_samples),
        "--output-dir", output_dir,
        "--num-mbox-files", str(num_mbox_files)
    ]
    subprocess.run(cmd)

def run_docs_generator(users, config, api_key=None):
    print("--- Running Docs Generator ---")
    user_list = " ".join(users.keys())
    docs_config = config.get("docs", {})
    num_files = get_config_value(docs_config, "num_files", 10)
    org_name = get_config_value(docs_config, "org_name", "Shire Holdings")
    theme = get_config_value(docs_config, "theme")
    roles = get_config_value(docs_config, "roles", ["CEO", "CFO", "CTO", "HR_Manager", "Sales_Manager", "Marketing_Manager", "Project_Manager", "Accountant", "Software_Engineer", "Customer_Support_Specialist"])
    file_types = get_config_value(docs_config, "file_types", ["document", "spreadsheet", "presentation", "image", "pdf"])
    doc_types = get_config_value(docs_config, "doc_types", [
        "Internal Memo", "Project Proposal", "Competitive Analysis", "Budget Report", "Meeting Minutes",
        "Business Requirements Document (BRD)", "Standard Operating Procedure (SOP)", "Marketing Plan",
        "Sales Strategy", "Quarterly Business Review (QBR)", "Press Release", "Employee Onboarding Checklist",
        "Performance Improvement Plan (PIP)", "Job Description", "Offer Letter", "Vendor Contract",
        "Non-Disclosure Agreement (NDA)", "Service Level Agreement (SLA)", "Incident Report", "Change Request Form"
    ])
    sheet_types = get_config_value(docs_config, "sheet_types", [
        "Financial Statement", "Project Timeline", "Sales Tracker", "Inventory List", "Employee Directory",
        "Budget vs. Actuals", "Marketing Campaign Tracker", "Customer Relationship Management (CRM) Data",
        "Lead Generation Funnel", "Social Media Content Calendar", "Gantt Chart", "Resource Allocation Plan",
        "Risk Register", "Issue Tracker", "Payroll Register", "Accounts Receivable Aging",
        "Accounts Payable Aging", "Cash Flow Statement", "Burn Down Chart", "Capacity Planner"
    ])
    ppt_types = get_config_value(docs_config, "ppt_types", [
        "Quarterly Review", "New Product Pitch", "Market Trend Analysis", "Team Training Guide",
        "Sales Kick-Off (SKO) Presentation", "Investor Pitch Deck", "Company All-Hands Meeting",
        "Project Kick-off Presentation", "Go-to-Market Strategy", "Customer Onboarding Guide",
        "Product Demonstration", "Competitive Landscape Review", "Post-Mortem Analysis",
        "Annual General Meeting (AGM) Presentation", "Change Management Communication", "Technology Roadmap",
        "Financial Results Briefing", "HR Policy Overview", "Crisis Communication Plan", "Partner Program Overview"
    ])
    pdf_types = get_config_value(docs_config, "pdf_types", [
        "Employee Manual", "Analyst Report", "User Guide", "Summary Report", "Design Guide",
        "Invoice", "Purchase Order", "White Paper", "Case Study", "Annual Report",
        "Compliance Certificate", "Legal Contract", "Technical Manual", "Product Brochure",
        "Marketing eBook", "Signed Agreement", "Official Company Statement", "Terms of Service",
        "Privacy Policy", "Security Whitepaper"
    ])

    cmd = [
        "python3", "docs/generate_files.py",
        "--users", user_list,
        "--num-files", str(num_files),
        "--org-name", org_name,
        "--theme", theme,
        "--roles", *roles,
        "--file-types", json.dumps(file_types),
        "--doc-types", json.dumps(doc_types),
        "--sheet-types", json.dumps(sheet_types),
        "--ppt-types", json.dumps(ppt_types),
        "--pdf-types", json.dumps(pdf_types)
    ]
    if api_key:
        cmd.extend(["--api-key", api_key])
    subprocess.run(cmd)

def main():
    parser = argparse.ArgumentParser(description="Generate all fake organization data.")
    parser.add_argument("--config", default="config.json", help="Path to the configuration file.")
    args = parser.parse_args()

    if not os.path.exists(args.config):
        print(f"Error: Config file not found at {args.config}")
        print("Please create a config.json file. You can use config.example.json as a template.")
        return

    with open(args.config) as f:
        config = json.load(f)

    domain = get_config_value(config, "domain")
    users = get_config_value(config, "users")
    api_key = get_config_value(config, "gemini_api_key")

    if not domain or not users:
        print("Error: 'domain' and 'users' must be defined in the config file.")
        return

    if "calendar" in config:
        run_calendar_generator(domain, users, config.get("calendar", {}))
    if "email" in config:
        run_email_generator(config.get("email", {}))
    if "docs" in config:
        run_docs_generator(users, config, api_key)

if __name__ == "__main__":
    main()
